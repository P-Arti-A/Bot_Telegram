#########################################################
# INITIALIZATION VARIABLES

from cgitb import text
import logging as log
import telebot
from telebot import types
import sqlite3
from random import randint, random
from config import TOKEN, direct, directhandler
from Keyboard import keyboard


class ud:   #UserData Class
    def __init__(self, message, user_login = None, user_password = None):
        self.ms = message
        self.id = message.chat.id #User identifier
        self.fn = message.from_user.first_name #First username
        self.un = message.from_user.username #User nickname 
        self.lg = user_login
        self.pw = user_password
        self.tx = message.text

# class statemachin:
#     def __init__(self, state = ''):
#         self.action = 'action'
#         self.registrate = 'registrate'
#         statenow = state
    # def state (state: str):
        

    # def namesbutt(butt_name):
    #     bname = {'casino': "üé∞ –ö–∞–∑–∏–Ω–æ!", 'bone': "üé≤ –ö–æ—Å—Ç–∏!", 'my_cas': "–°–∞–º–æ–¥–µ–ª—å–Ω–æ–µ –∫–∞–∑–∏–Ω–æ!", 'back': "‚óÄÔ∏è –ù–∞–∑–∞–¥"}.get(butt_name)
    #     return bname

    # def keyboard(*args):
    #     markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    #     markup.add(*args)
    #     return markup

    # def handler (func):
    #     bot.register_next_step_handler(message, func)

bot = telebot.TeleBot(TOKEN)

db = sqlite3.connect ('Telegram_bot/CasinoDataTelegram.db', check_same_thread=False)  # DataBase
cdb = db.cursor()                       # Cursor of DB

                                        # Create table
cdb.execute ("""CREATE TABLE IF NOT EXISTS users (
    login TEXT (30),
    password TEXT (16),
    cash BIGINT (15)                          
)""")

db.commit()

#########################################################
# BASIC PROGRAM

log.basicConfig(filename=direct, format='%(levelname)s %(asctime)s - %(message)s', level=log.INFO, encoding='utf-8', datefmt='%m/%d/%Y %H:%M:%S')

@bot.message_handler(commands=['start'])
def welcome (message):
    log.info(f'ID:{ud(message).id}, {ud(message).fn}({ud(message).un}), –∏—Å–ø. –∫–æ–º–∞–Ω–¥—É: {message.text}')
    markup = keyboard.mark(keyboard.button("–ö–∞–∑–∏–Ω–æ"), keyboard.button("–ö–æ—Å—Ç–∏"), keyboard.button("–ú–æ—ë –∫–∞–∑–∏–Ω–æ"))

    bot.send_message(ud(message).id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {ud(message).fn}!\n–Ø - *{bot.get_me().first_name}*, –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á—Ç–æ–±—ã –±—ã—Ç—å –ø–æ–¥–æ–ø—ã—Ç–Ω—ã–º –∫—Ä–æ–ª–∏–∫–æ–º.",
    parse_mode='markdown', reply_markup = markup)

@bot.message_handler(commands=['notification'])
def notification(message):
    log.info(f'ID:{ud(message).id}, {ud(message).fn}({ud(message).un}), –∏—Å–ø. –∫–æ–º–∞–Ω–¥—É: {message.text}')
    markup = keyboard.mark(keyboard.button("–ù–∞–∑–∞–¥"))
    with open (direct, 'rt', encoding='utf-8') as f:
        text = f.readlines()
        table_t = []
        for t in text:
            t = t.split()
            if f'ID:{ud(message).id},' in t:
                t = t[1:3]+t[-4:]
                table_t.append (' '.join(t))
        text = '\n'.join(table_t[-10:])
    
    bot.send_message(ud(message).id, f'{ud(message).fn}, –≤–æ—Ç —Ç–µ–∫—É—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—Ä—É—á–µ–Ω–∏—è –≤ –∫–∞–∑–∏–Ω–æ:\n{text}', reply_markup = markup)

@bot.callback_query_handler(func = lambda call: call.data in ['-10', '-', 'bet', '+', '+10'])
def callback_inline(call):
    global user
    global bet
    if call.message:
        if call.data == '-10': 
            bet -= 10
            if bet < 0: bet = 0
        elif call.data == '-': 
            bet -= 1
            if bet < 0: bet = 0
        elif call.data == 'bet': 
            bot.send_message (user.id, '–°—Ç–∞–≤–∫–∞ —Å–¥–µ–ª–∞–Ω–∞!')
            randomid(user.ms)
        elif call.data == '+': 
            bet += 1
        elif call.data == '+10': 
            bet += 10
        if call.data != 'bet':
            markup = keyboard.markinline(keyboard.inlinebut('-10'), 
                                    keyboard.inlinebut('-'), 
                                    types.InlineKeyboardButton(f'{bet}', callback_data='bet'),
                                    keyboard.inlinebut('+'), 
                                    keyboard.inlinebut('+10'), Row_width = 5)
            
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text = f'–ö–ê-–ó–ò-–ù–û! –†–∞–Ω–¥–æ–ú–∏—Ç. –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ —Ä–∞–≤–Ω–∞ = {bet}', reply_markup = markup)
        
    

@bot.message_handler(content_types=['text'])
def messaged (message):
    global user
    try:
        if message.text not in ["üé∞ –ö–∞–∑–∏–Ω–æ!","üé≤ –ö–æ—Å—Ç–∏!"]:
            log.info(f'ID:{ud(message).id}, {ud(message).fn}({ud(message).un}), –Ω–∞–ø–∏—Å–∞–ª: {message.text}')
        if message.text == "üé∞ –ö–∞–∑–∏–Ω–æ!":
            valuedice = bot.send_dice(message.chat.id, emoji='üé∞')
            log.info(f'ID:{ud(message).id}, {ud(message).fn}({ud(message).un}), –≤ –ö–∞–∑–∏–Ω–æ = {valuedice.dice.value}')
        elif message.text == "üé≤ –ö–æ—Å—Ç–∏!":
            valuedice = bot.send_dice(message.chat.id)
            log.info(f'ID:{ud(message).id}, {ud(message).fn}({ud(message).un}), –≤ –ö–æ—Å—Ç–∏ = {valuedice.dice.value}')
        elif message.text == "–°–∞–º–æ–¥–µ–ª—å–Ω–æ–µ –∫–∞–∑–∏–Ω–æ!":
            markup = keyboard.mark(keyboard.button("–í—Ö–æ–¥"), keyboard.button("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"), keyboard.button("–ù–∞–∑–∞–¥"), One_time_keyboard = True, Row_width = 2)
            bot.send_message (ud(message).id, '–ó–∞–ø—É—Å–∫ —Å–∞–º–æ–¥–µ–ª—å–Ω–æ–≥–æ –ö–∞–∑–∏–Ω–æ!', reply_markup=markup)
            # tprint (message, '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:\n–õ–æ–≥–∏–Ω:')
        elif message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
            welcome(message)
        elif message.text == "–í—Ö–æ–¥":   
            tprint (message, '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!\n–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.\n–õ–æ–≥–∏–Ω;–ü–∞—Ä–æ–ª—å')
            bot.register_next_step_handler(message, initialization)
        elif message.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
            tprint (message, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!\n–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.\n–õ–æ–≥–∏–Ω;–ü–∞—Ä–æ–ª—å')
            bot.register_next_step_handler(message, registrate)
        elif user.lg is not None and message.text == "üé± –†–∞–Ω–¥–æ–ú–∏—Ç":
            tprint (message, "–ó–∞–ø—É—Å–∫–∞–µ–º –†–∞–Ω–¥–æ–ú–∏—Ç")
            bet_check(message)
        elif user.lg is not None and message.text == "üé∞ –û–¥–Ω–æ—Ä—É–∫–∏–π –ë–∞–Ω–¥–∏—Ç":
            tprint (message, "–ó–∞–ø—É—Å–∫–∞–µ–º –û–¥–Ω–æ—Ä—É–∫–æ–≥–æ –ë–∞–Ω–¥–∏—Ç–∞")
        elif user.lg is not None and message.text == "üé≤ –†—É–ª–µ—Ç–∫–∞":
            tprint (message, "–ó–∞–ø—É—Å–∫–∞–µ–º –†—É–ª–µ—Ç–∫—É")
    except NameError:
        tprint (message, "–í—ã –µ—â—ë –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–ª–∏—Å—å!")


# print ('–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è, –ø—Ä–µ–≤—ã—à–µ–Ω–æ!')
#     quit()

#########################################################
# FUNCSION
# @bot.message_handler(commands=['start', 'notification'])

def comeback (message):
    log.info(f'ID:{ud(message).id}, {ud(message).fn}({ud(message).un}), –Ω–∞–ø–∏—Å–∞–ª: {message.text}')
    if message.text in ['/start', '/notification', '‚óÄÔ∏è –ù–∞–∑–∞–¥']:
        welcome(message)
        return True

#########################################################

def tprint (message, text, Reply_markup: str = None):
    log.info(f'ID:{ud(message).id}, {ud(message).fn}({ud(message).un}), –≤—ã–≤–µ–ª –Ω–∞ —ç–∫—Ä–∞–Ω: {text}')
    return bot.send_message(ud(message).id, text, reply_markup=Reply_markup)

#########################################################

def registrate (message):
    global user
    if comeback(message):  return
    user = ud(message)
    try:
        user.lg, user.pw = user.tx.split(';')
    except ValueError:
        tprint (message, '–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å!')
        exit()
    if '' in [user.lg, user.pw] :
        tprint (message, '–í—ã –Ω–µ –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ!')
        bot.register_next_step_handler(message, registrate)
        exit()
    cdb.execute (f'INSERT INTO users VALUES (?, ?, ?)', (user.lg, user.pw, 100))
    db.commit()
    tprint (message, f'–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å, {user.lg} {user.pw}\n–í–∞—à –±–∞–ª–∞–Ω—Å: 100')
    play()

#########################################################

prob = 0 # –ü—Ä–æ–±–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ initialization –∫–æ—Ç–æ—Ä–∞—è –æ–±—ä—è–≤–ª–µ–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π

def initialization(message):
    global prob
    global user
    if comeback(message):  return
    if prob == 3:
        tprint (message, '–í—ã –Ω–µ —Å–º–æ–≥–ª–∏ –≤–æ–π—Ç–∏!')
        quit ()
    user = ud(message)
    try:
        user.lg, user.pw = user.tx.split(';')
    except ValueError:
        tprint (message, '–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å!')
        bot.register_next_step_handler(message, initialization)
        return
    cdb.execute (f"SELECT login FROM users WHERE login = '{user.lg}' AND password = '{user.pw}'")
    if cdb.fetchone() is None:
        tprint (message, f'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —É –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {3 - prob} –ø–æ–ø—ã—Ç–æ–∫\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É\n–õ–æ–≥–∏–Ω;–ü–∞—Ä–æ–ª—å')
        prob += 1
        bot.register_next_step_handler(message, initialization)
        return
    else: 
        tprint (message, f'–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–ª–∏—Å—å {user.lg}')
        play(message)

#########################################################

def play(message):
    markup = keyboard.mark(keyboard.button('–†–∞–Ω–¥–æ–ú–∏—Ç'), keyboard.button('–ë–∞–Ω–¥–∏—Ç'), keyboard.button('–†—É–ª–µ—Ç–∫–∞'), keyboard.button('–ù–∞–∑–∞–¥'), One_time_keyboard = True, Row_width = 1)
    tprint (message, '\n–í –∫–∞–∫—É—é –∏–≥—Ä—É —Å—ã–≥—Ä–∞–µ–º?\n1. –†–∞–Ω–¥–æ–ú–∏—Ç\n2. –û–¥–Ω–æ—Ä—É–∫–∏–π –ë–∞–Ω–¥–∏—Ç\n3. –†—É–ª–µ—Ç–∫–∞', Reply_markup = markup)
    bot.register_next_step_handler(message, messaged)
    return

#########################################################

bet = 0
def bet_check(message):
    global bet
    global botdata
    if not cash_check(user.lg): quit()
    # if 
    #     return
    # else: loc_bet = bet
    markup = keyboard.markinline(keyboard.inlinebut('-10'), 
                                 keyboard.inlinebut('-'), 
                                 types.InlineKeyboardButton(f'{bet}', callback_data='bet'),
                                 keyboard.inlinebut('+'), 
                                 keyboard.inlinebut('+10'), Row_width = 5)
    # bot_mes = bot.send_message(user.id, '–ö–ê-–ó–ò-–ù–û! –†–∞–Ω–¥–æ–ú–∏—Ç', reply_markup=markup)
    botdata = bot.edit_message_text(chat_id = user.id, message_id = message.message_id+1, reply_markup=markup, text='–ö–ê-–ó–ò-–ù–û! –†–∞–Ω–¥–æ–ú–∏—Ç. –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ —Ä–∞–≤–Ω–∞ = 0')
    

def randomid (message):
    global bet
    cdb.execute (f"SELECT cash from users WHERE login = '{user.lg}'")
    cash = cdb.fetchone()[0]
    # tprint (ud.ms, '\n–ï—Å–ª–∏ –Ω–∞–∏–≥—Ä–∞–ª–∏—Å—å –ø–∏—à–∏—Ç–µ "–≤—ã—Ö–æ–¥/quit" –¥–ª—è –≤—ã—Ö–æ–¥–∞')
    fortune = randint (-20, 20)
    bet_new = (fortune * int(bet) / 10).real    # –ú–µ—Ç–æ–¥ .real —ç—Ç–æ –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–∑ —á–∏—Å–µ–ª. –ù–∞ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—É—á–∞–µ–º float
    cash += round (bet_new, 2)
    if fortune >= 0: 
        tprint (message, f"–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {fortune}\n–í—ã –≤—ã–π–≥—Ä–∞–ª–∏: {round(bet_new,2)}\n–¢–µ–ø–µ—Ä—å –≤–∞—à –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω: {cash:.1f}")
    elif fortune < 0:
        tprint (message, f"–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {fortune}\n–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏: {round(bet_new,2)}\n–¢–µ–ø–µ—Ä—å –≤–∞—à –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω: {cash:.1f}")
    if cash < 0: zeroing(user.lg)
    # else:
        # cdb.execute (f"UPDATE users SET cash = {cash:.1f} WHERE login = '{user.lg}'")
        # db.commit()
    # bot.delete_message (user.id, botdata.ms.id)
    bet_check(message)


#########################################################

# def slot_machin (user_login):
#     while True:
#         prob_init (user_login)
#         tprint (message, '\n–ù–∞–∏–≥—Ä–∞–ª–∏—Å—å? –ü–∏—à–∏—Ç–µ "–≤—ã—Ö–æ–¥/quit" –¥–ª—è –≤—ã—Ö–æ–¥–∞')
#         bet = bet_check (user_login)
#         if bet is None: continue
#         cdb.execute (f"SELECT cash from users WHERE login = '{user_login}'")
#         cash = cdb.fetchone()[0]
#         table = {'—æ':20, '—º':10, '—∫':5, '—¨':2.5, '—™':1, '—¶':0.5, '”î':0.25, '“®':0.1}
#         simbol = [i for i in table.keys ()]
#         chance = []
#         random_chance = 7
#         for i in table:
#             tprint (f'{i}: {table[i]}X', end='       ')
#         for i in range (random_chance):
#             if random () > i * 0.1 + 0.25: random_chance -= 1 
#         chance.append (simbol [random_chance])
#         while len(chance)<3:
#             if random () > 0.5:  chance.append (chance[0])
#             else: chance.append (simbol[randint(0,7)])
#         if chance [0] == chance [1]: 
#             if chance [1] == chance [2]: 
#                 bet *= table.get (chance [-1])
#                 tprint (message, " ".join (chance), "–í—ã –≤—ã–π–≥—Ä–∞–ª–∏! ", bet)
#             else: 
#                 tprint (message, " ".join (chance), "–ü–æ—á—Ç–∏! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏: ", bet)
#                 bet -= bet*2
#         else: 
#             tprint (message, " ".join (chance), "–ü—Ä–æ–π–≥—Ä—ã—à! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏: ", bet)
#             bet -= bet*2
#         cdb.execute (f"UPDATE users SET cash = {cash+bet} WHERE login = '{user_login}'")
#         db.commit()
#         show_user (user_login)
#         # chance = set(simbol)
#         # print (simbol,chance)

# #########################################################

# def ruletka(user_login):
#     # prob_init(user_login)
#     table_rulet = [i for i in range(1, 37)]
#     table_rulet.extend (['1-12', '13-24', '25-36'])
#     while True:
#         tprint (message, '\n–ù–∞–∏–≥—Ä–∞–ª–∏—Å—å? –ü–∏—à–∏—Ç–µ "–≤—ã—Ö–æ–¥/quit" –¥–ª—è –≤—ã—Ö–æ–¥–∞')
#         bet = bet_check (user_login)
#         if bet is None: continue
#         # –í—ã–≤–µ–¥–µ–Ω–∏–µ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª —Å—Ç–æ–ª–∞ —Ä—É–ª–µ—Ç–∫–∏
#         tprint (message, '–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–¥–∞ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞—à—É —Å—Ç–∞–≤–∫—É:\n')
#         for i in range (1,37):
#             if i < 9:
#                 tprint (i, end='   ')
#             else: tprint (i, end='  ')
#             if i % 3 == 0: print()
#         tprint (message, " ".join (table_rulet [-3:]))
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
#         while True:
#             try:
#                 number = input_set()
#                 if number in table_rulet [-3:]:
#                     break
#                 elif number not in table_rulet:
#                     tprint (message, '–í—ã –≤–≤–µ–¥–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!')
#                     continue
#                 number = abs(int(number))
#                 break
#             except ValueError:
#                 tprint (message, '–í—ã –≤–≤–µ–¥–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!')
#                 continue
#         # –í—ã–≤–æ–¥–∏–º —á–∏—Å–ª–æ –≤—ã–ø–∞–≤—à–µ–µ –Ω–∞ —Ä—É–ª–µ—Ç–∫–µ
#         cdb.execute (f"SELECT cash from users WHERE login = '{user_login}'")
#         cash = cdb.fetchone()[0]
#         tprint (message, '–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: ') 
#         rulet = randint (1, 36)
#         tprint (rulet)
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–∞–≤—à–µ–µ —á–∏—Å–ª–æ —Å–æ —Å—Ç–∞–≤–∫–æ–π
#         result = 0
#         if isinstance (number, int): 
#             if rulet == number:
#                 result = bet * 35
#                 print(f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–π–≥—Ä–∞–ª–∏: {result}')
#             else:
#                 result -= bet
#                 print(f'–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {result}')
#         else:
#             number = number.split ('-')
#             if int(number[0]) <= rulet <= int(number[1]):
#                 result = bet * 2.5
#                 print(f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–π–≥—Ä–∞–ª–∏: {result}')
#             else:
#                 result -= bet
#                 print(f'–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {result}')
#         cdb.execute (f"UPDATE users SET cash = {cash+result} WHERE login = '{user_login}'")
#         db.commit()
#         tprint (f'–í–∞—à –±–∞–ª–∞–Ω—Å: {cash+result}')
    

# #########################################################

# def setings (): 
#     tprint (message, '''–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –≤ —Å–µ–±–µ —Å–ª–µ–¥—É—é—â–∏–µ –º–µ–Ω—é:
#     'regis' - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, 
#     'random' - –ò–≥—Ä–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ,
#     'table' - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é,
#     'plays' - –ù–∞—á–∞–ª–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã,
#     'zero' - –û–±–Ω—É–ª–µ–Ω–∏–µ,
#     'delet' - –£–¥–∞–ª–µ–Ω–∏–µ,
#     'allshow' - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤,
#     'quit' - –í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã,
#     'show' - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ,
#     'cashup' - –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —É –∏–≥—Ä–æ–∫–∞,
#     'probin' - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–Ω–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ,
#     'slotmach' - "–û–¥–Ω–æ—Ä—É–∫–∏–π –±–∞–Ω–¥–∏—Ç"
#     'betcheck' - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–≤–∫–∏ —É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
#     'rulet' - –†—É–ª–µ—Ç–∫–∞''')
#     word = input()

#     sets = {'regis': registrate ,
#             'random': randomid ,
#             'table': main_table,
#             'plays': play,
#             'zero': zeroing ,
#             'delet': delete,
#             'allshow': show_all_user,
#             'quit': quit,
#             'show': show_user,
#             'cashup': cash_up,
#             'probin': prob_init,
#             'betcheck': bet_check,
#             'slotmach': slot_machin,
#             'rulet': ruletka}.get (word, "–û—à–∏–±–∫–∞, –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è!")
#     if word in ['regis', 'plays', 'allshow', 'quit']:
#         if word == 'regis':    return sets(input ('Log in: '), input ('Password: '))
#         else:   return sets() 
#     elif word in ['rulet', 'slotmach', 'random', 'table', 'plays', 'zero', 'delet', 'show', 'cashup', 'probin', 'betcheck']: return sets(input ('Log in: '))
#     return setings()

# #########################################################

# def prob_init (message):
#     cdb.execute (f"SELECT * FROM users WHERE login = '{user.lg}'")
#     if cdb.fetchone () is None: return tprint (message, "–ù–µ –Ω–∞–π–¥–µ–Ω –¥–∞–Ω–Ω—ã–π –ª–æ–≥–∏–Ω!")
#     else: True
    
# #########################################################
    
# def show_user(user): 
#     for value in cdb.execute (f"SELECT * FROM users WHERE login = '{user}'"):
#         tprint (value)

# #########################################################
    
# def show_all_user(): 
#     for value in cdb.execute (f"SELECT * FROM users"):
#         tprint (value)


# #########################################################

# def delete (user_login):
#     prob_init (user_login)
#     cdb.execute (f"DELETE FROM users WHERE login = '{user_login}'")
#     db.commit()
#     tprint (message, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω!")
#     initialization()

#########################################################

def zeroing (user_login):
    cdb.execute (f"UPDATE users SET cash = 0 WHERE login = '{user_login}'")
    db.commit()
    tprint (user.ms, "–í–∞—à –±–∞–ª–∞–Ω—Å = 0!")

#########################################################

# def main_table(user_login):
#     prob_init (user_login)
#     cdb.execute (f"SELECT * from users WHERE login = '{user_login}'")
#     cash = cdb.fetchone()[-1]
#     # print ('\n–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–ª–∏—Å—å!')
#     tprint (f'{user_login}, –í–∞—à –±–∞–ª–∞–Ω—Å: {cash}')

# #########################################################

# def cash_up(user_login):
#     prob_init (user_login)
#     new_cash = int(input_set('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: '))
#     cdb.execute (f"SELECT cash FROM users WHERE login = '{user_login}'")
#     cash = cdb.fetchone()[0]
#     cdb.execute (f"UPDATE users SET cash = {cash + new_cash} WHERE login = '{user_login}'")
#     db.commit()
#     tprint (f'{user_login}, –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –∏ —Ä–∞–≤–µ–Ω: {cash + new_cash}')
    
#########################################################

def cash_check (user_login):
    cdb.execute (f"SELECT  cash from users WHERE login = '{user_login}'")
    cash = cdb.fetchone()[0]
    try:
        if cash <= 0:
            tprint (user.ms, "–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
            welcome(user.ms)
            return False
        else: return True
    except ValueError: 
        tprint (user.ms, '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω!')
        welcome(user.ms)

#########################################################
# def input_set(text):
#     if text in ['setings', 'seting', 'settings', 'setting']:
#         setings()
#         quit()
#     elif text == "": 
#         tprint (message, "–í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö!")
#         input_set ()
#     else: return text


#########################################################
# MAIN PROGRAM

# @bot.message_handler(content_types=['text'])
# def main():
    # user = ud(mes)
    # bot.register_next_step_handler(user.ms, initialization)

#     # try:
#     play(message)
#     # finally:
#     #     cdb.close()
#     #     db.close()


# if __name__ == '__main__':
bot.enable_save_next_step_handlers(delay=2)
bot.load_next_step_handlers()
bot.polling(none_stop = True)
#########################################################