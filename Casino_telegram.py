#########################################################
# INITIALIZATION VARIABLES

from cgitb import text
import logging as log
import telebot
from telebot import types
import sqlite3
from random import randint, random
from config import TOKEN, direct, directhandler
from Keyboard import keyboard
import math as mt

class ud:   #UserData Class
    def __init__(self, message, user_login = None, user_password = None):
        self.ms = message
        self.id = message.chat.id #User identifier
        self.fn = message.from_user.first_name #First username
        self.lg = message.from_user.username #User nickname 
        self.pw = user_password
        self.tx = message.text
        self.pl = None

class bd:
    def __init__(self, mes = '') -> None:
        self.mes_id = mes.message_id
        self.mes_now = mes
        self.last_mes = None
        self.bet = 1
        self.last_bet = 1
        self.bet_mes = None
        self.last_bet_mes = None
        self.ch = 0.15
        self.pb = 0
        self.mes_value = None
        self.last_mes_value = None
# class statemachin:
#     def __init__(self, state = ''):
#         self.action = 'action'
#         self.registrate = 'registrate'
#         statenow = state
    # def state (state: str):
        

    # def namesbutt(butt_name):
    #     bname = {'casino': "üé∞ –ö–∞–∑–∏–Ω–æ!", 'bone': "üé≤ –ö–æ—Å—Ç–∏!", 'my_cas': "–°–∞–º–æ–¥–µ–ª—å–Ω–æ–µ –∫–∞–∑–∏–Ω–æ!", 'back': "‚óÄÔ∏è –ù–∞–∑–∞–¥"}.get(butt_name)
    #     return bname

    # def keyboard(*args):
    #     markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    #     markup.add(*args)
    #     return markup

    # def handler (func):
    #     bot.register_next_step_handler(message, func)

bot = telebot.TeleBot(TOKEN)

db = sqlite3.connect ('CasinoDataTelegram.db', check_same_thread=False)  # DataBase
cdb = db.cursor()                       # Cursor of DB

                                        # Create table
cdb.execute ("""CREATE TABLE IF NOT EXISTS users (
    login TEXT (30),
    password TEXT (16),
    cash BIGINT (15)                          
)""")

db.commit()

#########################################################
# BASIC PROGRAM

log.basicConfig(filename=direct, format='%(levelname)s %(asctime)s - %(message)s', level=log.INFO, encoding='utf-8', datefmt='%m/%d/%Y %H:%M:%S')

@bot.message_handler(commands=['start'])
def welcome (message):
    log.info(f'ID:{ud(message).id}, {ud(message).fn}({ud(message).lg}), –∏—Å–ø. –∫–æ–º–∞–Ω–¥—É: {message.text}')
    markup = keyboard.mark(keyboard.button("–ö–∞–∑–∏–Ω–æ"), keyboard.button("–ö–æ—Å—Ç–∏"), keyboard.button("–ú–æ—ë –∫–∞–∑–∏–Ω–æ"))

    bot.send_message(ud(message).id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {ud(message).fn}!\n–Ø - *{bot.get_me().first_name}*, –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á—Ç–æ–±—ã –±—ã—Ç—å –ø–æ–¥–æ–ø—ã—Ç–Ω—ã–º –∫—Ä–æ–ª–∏–∫–æ–º.",
    parse_mode='markdown', reply_markup = markup)

@bot.message_handler(commands=['notification'])
def notification(message):
    log.info(f'ID:{ud(message).id}, {ud(message).fn}({ud(message).lg}), –∏—Å–ø. –∫–æ–º–∞–Ω–¥—É: {message.text}')
    markup = keyboard.mark(keyboard.button("–ù–∞–∑–∞–¥"))
    with open (direct, 'rt', encoding='utf-8') as f:
        text = f.readlines()
        table_t = []
        for t in text:
            t = t.split()
            if f'ID:{ud(message).id},' in t:
                t = t[1:3]+t[-4:]
                table_t.append (' '.join(t))
        text = '\n'.join(table_t[-10:])
    
    bot.send_message(ud(message).id, f'{ud(message).fn}, –≤–æ—Ç —Ç–µ–∫—É—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—Ä—É—á–µ–Ω–∏—è –≤ –∫–∞–∑–∏–Ω–æ:\n{text}', reply_markup = markup)

@bot.callback_query_handler(func = lambda call: call.data in ['-10', '-', 'bet', '+', '+10'])
def callback_inline(call):
    global user
    global databot
    if call.message:
        if call.data == '-10': 
            databot.bet -= 10
            if databot.bet < 1: databot.bet = 1
        elif call.data == '-': 
            databot.bet -= 1
            if databot.bet < 1: databot.bet = 1
        elif call.data == 'bet': 
            if cash_check (user.lg): return
            match user.pl:
                case 'random':
                    randomid(user.ms)
                case 'slot':
                    slot_machin(user.ms)
                case 'rulet':
                    markup = keyboard.inlinekeyboard()
                    databot.last_mes = bot.edit_message_text(chat_id = user.id, message_id = databot.last_mes.message_id, reply_markup=markup, 
                    text=f'–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ!')
                case _:
                    tprint (user.ms, '–ò–≥—Ä–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞!')
                    play (user.ms)
                    quit()
        elif call.data == '+': 
            databot.bet += 1
        elif call.data == '+10': 
            databot.bet += 10
    
        if call.data != 'bet' and databot.last_bet != databot.bet:
            markup = keyboard.markinline(keyboard.inlinebut('-10'), 
                                    keyboard.inlinebut('-'), 
                                    types.InlineKeyboardButton(f'{databot.bet}', callback_data='bet'),
                                    keyboard.inlinebut('+'), 
                                    keyboard.inlinebut('+10'), Row_width = 5)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text = f'–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ —Ä–∞–≤–Ω–∞ = {databot.bet}', 
            reply_markup = markup) 
            databot.last_bet = databot.bet

@bot.callback_query_handler(func = lambda call: call.data in str(range(1, 37)) or ['1-12', '13-24', '25-36', '–í—ã–±–æ—Ä'])
def callback_inline(call):
    global user
    global databot
    if call.message:
        if call.data == ' ': pass 
        elif call.data == '–í—ã–±–æ—Ä': 
            try:
                if databot.last_mes is not None:
                    bot.delete_message(chat_id = user.id, message_id = databot.last_mes.message_id)
                    bot.delete_message(chat_id = user.id, message_id = databot.last_mes.message_id+1)
            except: pass
            databot = bd(tprint (user.ms, "–ó–∞–ø—É—Å–∫–∞–µ–º –†—É–ª–µ—Ç–∫—É"))
            bet_check (user.ms)
        elif call.data in str(range(1, 37)) or ['1-12', '13-24', '25-36']:
            databot.mes_value = call.data
            if databot.mes_value != databot.last_mes_value:
        # if call.data != 'bet' and databot.last_bet != databot.bet:
                markup = keyboard.inlinekeyboard()
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text = f'–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ —Ä–∞–≤–Ω–∞ = {databot.mes_value}\n–ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã,\n–Ω–∞–∂–º–∏—Ç–µ –µ—â—ë —Ä–∞–∑', 
                reply_markup = markup) 
                databot.last_mes_value = databot.mes_value
            else: ruletka(user.ms)


@bot.message_handler(content_types=['text'])
def messaged (message):
    global user
    global databot
    try:
        if user.pw is None: pass
    except NameError:
        user = ud(message)
    try:
        if message.text not in ["üé∞ –ö–∞–∑–∏–Ω–æ!","üé≤ –ö–æ—Å—Ç–∏!"]:
            log.info(f'ID:{user.id}, {user.fn}({user.lg}), –Ω–∞–ø–∏—Å–∞–ª: {message.text}')
        if message.text == "üé∞ –ö–∞–∑–∏–Ω–æ!":
            valuedice = bot.send_dice(message.chat.id, emoji='üé∞')
            log.info(f'ID:{user.id}, {user.fn}({user.lg}), –≤ –ö–∞–∑–∏–Ω–æ = {valuedice.dice.value}')
        elif message.text == "üé≤ –ö–æ—Å—Ç–∏!":
            valuedice = bot.send_dice(message.chat.id)
            log.info(f'ID:{user.id}, {user.fn}({user.lg}), –≤ –ö–æ—Å—Ç–∏ = {valuedice.dice.value}')
        elif message.text == "–°–∞–º–æ–¥–µ–ª—å–Ω–æ–µ –∫–∞–∑–∏–Ω–æ!":
            cdb.execute (f"SELECT login FROM users WHERE login = '{user.lg}'")
            if user.pw is not None: 
                cdb.execute (f"SELECT password FROM users WHERE login = '{user.lg}'")
                user.pw = cdb.fetchone()[0]
                play (message)
            else:
                markup = keyboard.mark(keyboard.button("–í—Ö–æ–¥"), keyboard.button("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"), keyboard.button("–ù–∞–∑–∞–¥"), One_time_keyboard = True, Row_width = 2)
                bot.send_message (user.id, '–ó–∞–ø—É—Å–∫ —Å–∞–º–æ–¥–µ–ª—å–Ω–æ–≥–æ –ö–∞–∑–∏–Ω–æ!', reply_markup=markup)
        elif message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
            welcome(message)
        elif message.text == "–í—Ö–æ–¥":   
            cdb.execute (f"SELECT login FROM users WHERE login = '{user.lg}'")
            if cdb.fetchone() is None:
                tprint (message, '–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —É –Ω–∞—Å!\n\n–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!\n–í–≤–µ–¥–∏—Ç–µ –ü–∞—Ä–æ–ª—å')
                bot.register_next_step_handler(message, registrate)
            else:    
                tprint (message, '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å')
                bot.register_next_step_handler(message, initialization)
        elif message.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
            cdb.execute (f"SELECT login FROM users WHERE login = '{user.lg}'")
            if cdb.fetchone() is not None:  
                tprint (message, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã\n–ï—Å–ª–∏ –≤—ã –∑–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @p_arti_a')
                return
            tprint (message, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!\n–í–≤–µ–¥–∏—Ç–µ –ü–∞—Ä–æ–ª—å')
            bot.register_next_step_handler(message, registrate)
        elif user.pw is not None and message.text in ["üé± –†–∞–Ω–¥–æ–ú–∏—Ç", "üé∞ –û–¥–Ω–æ—Ä—É–∫–∏–π –ë–∞–Ω–¥–∏—Ç", "üé≤ –†—É–ª–µ—Ç–∫–∞"]:
            try:
                if databot.last_mes is not None:
                    bot.delete_message(chat_id = user.id, message_id = databot.last_mes.message_id)
                    bot.delete_message(chat_id = user.id, message_id = databot.last_mes.message_id-1)
            except: pass
            match message.text:
                case "üé± –†–∞–Ω–¥–æ–ú–∏—Ç":
                    user.pl = 'random'
                    tprint (message, '–í –¥–∞–Ω–Ω–æ–π –∏–≥—Ä–µ –º–æ–∂–µ—Ç –≤—ã–ø–∞—Å—Ç—å —á–∏—Å–ª–æ –æ—Ç -20 –¥–æ 20. –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–ø–∞–≤—à–µ–≥–æ —á–∏—Å–ª–∞, –≤–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –±—É–¥–µ—Ç —É–º–Ω–æ–∂–µ–Ω–∞ –Ω–∞ —ç—Ç–æ —á–∏—Å–ª–æ –¥–µ–ª—ë–Ω–æ–µ –Ω–∞ 10.\n–í—ã–π–≥—Ä—ã—à = –°—Ç–∞–≤–∫–∞ * –ß–∏—Å–ª–æ / 10')
                    databot = bd(tprint (message, "–ó–∞–ø—É—Å–∫–∞–µ–º –†–∞–Ω–¥–æ–ú–∏—Ç"))
                case "üé∞ –û–¥–Ω–æ—Ä—É–∫–∏–π –ë–∞–Ω–¥–∏—Ç":
                    user.pl = 'slot'
                    table = {'üíÄ':1, 'üåë':2.5, 'üåï':5, '‚≠êÔ∏è':10, 'üåà':25, 'üî•':50, 'üíØ':100, 'üí∞':250} 
                    tprint (message, ''.join([f'{i}: {table[i]}X\n' for i in table]))
                    databot = bd(tprint (message, "–ó–∞–ø—É—Å–∫–∞–µ–º –û–¥–Ω–æ—Ä—É–∫–æ–≥–æ –ë–∞–Ω–¥–∏—Ç–∞"))
                case "üé≤ –†—É–ª–µ—Ç–∫–∞":
                    # tprint (user.ms, '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!')
                    # return
                    user.pl = 'rulet'
                    tprint (message, '–í –Ω–∞—á–∞–ª–µ, –≤—ã–±—Ä–µ—Ç–∏ —Å—Ç–∞–≤–∫—É, –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ –≤–∞—à–µ–º—É –º–Ω–µ–Ω–∏—é –º–æ–∂–µ—Ç –≤—ã–ø–∞—Å—Ç—å –≤ —Ä—É–ª–µ—Ç–∫–µ.\n–ï—Å–ª–∏ –≤—ã —É–≥–∞–¥–∞–µ—Ç–µ, –º–Ω–æ–∂–∏—Ç–µ–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ:\n–ó–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ: 35–•\n–ó–∞ –¥–∏–∞–ø–æ–∑–æ–Ω: 2,5–•')
                    databot = bd(tprint (message, "–ó–∞–ø—É—Å–∫–∞–µ–º –†—É–ª–µ—Ç–∫—É"))
            bet_check(message)
        else: tprint (message, "–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã")
    except NameError as e:
        tprint (message, "–í—ã –µ—â—ë –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–ª–∏—Å—å!")
        log.error (e)


# print ('–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è, –ø—Ä–µ–≤—ã—à–µ–Ω–æ!')
#     quit()

#########################################################
# FUNCSION
# @bot.message_handler(commands=['start', 'notification'])

def comeback (message):
    log.info(f'ID:{ud(message).id}, {ud(message).fn}({ud(message).lg}), –Ω–∞–ø–∏—Å–∞–ª: {message.text}')
    if message.text in ['/start', '/notification', '‚óÄÔ∏è –ù–∞–∑–∞–¥']:
        welcome(message)
        return True

#########################################################

def tprint (message, text, Reply_markup: str = None):
    log.info(f'ID:{ud(message).id}, {ud(message).fn}({ud(message).lg}), –≤—ã–≤–µ–ª –Ω–∞ —ç–∫—Ä–∞–Ω: {text}')
    return bot.send_message(ud(message).id, text, reply_markup=Reply_markup)

#########################################################

def registrate (message):
    global user
    if comeback(message):  return
    user = ud(message)
    try:
        user.pw = user.tx
    except ValueError:
        tprint (message, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã!\n –í–æ–∑–≤—Ä–∞—â–∞—é –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.')
        welcome(message)
    match user.pw:
        case '':
            tprint (message, '–í—ã –Ω–µ –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ!')
            bot.register_next_step_handler(message, registrate)
            return
        case user.pw if len(user.pw) < 4:
            tprint (message, "–í—ã –≤–≤–µ–ª–∏ –º–µ–Ω—å—à–µ 4 —Å–∏–º–≤–æ–ª–æ–≤!")
            bot.register_next_step_handler(message, registrate)
            return
    cdb.execute (f'INSERT INTO users VALUES (?, ?, ?)', (user.lg, user.pw, 100))
    db.commit()
    tprint (message, f'–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å, {user.fn}\n–í–∞—à –±–∞–ª–∞–Ω—Å: 100')
    play(message)

#########################################################

def initialization(message):
    global user
    if comeback(message):  return
    user = ud(message)
    try:
        user.pw = user.tx
    except ValueError:
        tprint (message, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã!\n –í–æ–∑–≤—Ä–∞—â–∞—é –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.')
        welcome(message)
    match user.pw:
        case '':
            tprint (message, '–í—ã –Ω–µ –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ!')
            bot.register_next_step_handler(message, initialization)
            return
        case user.pw if len(user.pw) < 4:
            tprint (message, "–í—ã –≤–≤–µ–ª–∏ –º–µ–Ω—å—à–µ 4 —Å–∏–º–≤–æ–ª–æ–≤!")
            bot.register_next_step_handler(message, initialization)
            return
    cdb.execute (f"SELECT login FROM users WHERE login = '{user.lg}' AND password = '{user.pw}'")
    if cdb.fetchone() is None:
        tprint (message, f'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å')
        bot.register_next_step_handler(message, initialization)
        return
    else: 
        tprint (message, f'–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–ª–∏—Å—å {user.fn}')
        play(message)

#########################################################

def play(message):
    markup = keyboard.mark(keyboard.button('–†–∞–Ω–¥–æ–ú–∏—Ç'), keyboard.button('–ë–∞–Ω–¥–∏—Ç'), keyboard.button('–†—É–ª–µ—Ç–∫–∞'), keyboard.button('–ù–∞–∑–∞–¥'), One_time_keyboard = True, Row_width = 2)
    tprint (message, '\n–í –∫–∞–∫—É—é –∏–≥—Ä—É —Å—ã–≥—Ä–∞–µ–º?\n1. –†–∞–Ω–¥–æ–ú–∏—Ç\n2. –û–¥–Ω–æ—Ä—É–∫–∏–π –ë–∞–Ω–¥–∏—Ç\n3. –†—É–ª–µ—Ç–∫–∞', Reply_markup = markup)
    bot.register_next_step_handler(message, messaged)
    return

#########################################################

def bet_check(message):
    global databot
    # match user.pl:
        # case 'random':
    markup = keyboard.markinline(keyboard.inlinebut('-10'), 
                                keyboard.inlinebut('-'), 
                                types.InlineKeyboardButton(f'{databot.bet}', callback_data='bet'),
                                keyboard.inlinebut('+'), 
                                keyboard.inlinebut('+10'), Row_width = 5)
    if databot.bet == 1 and databot.pb == 0:
        databot.last_mes = bot.edit_message_text(chat_id = user.id, message_id = databot.mes_now.message_id, reply_markup=markup, 
        text=f'–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ —Ä–∞–≤–Ω–∞ = 1')
        databot.pb += 1
    else: pass
        # case 'rulet':
        #     markup = keyboard.inlinekeyboard()
        #     databot.last_mes = bot.edit_message_text(chat_id = user.id, message_id = databot.mes_now.message_id, reply_markup=markup, 
        #     text=f'–°–¥–µ–ª–∞–π—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É')
            
# if databot.last_bet != databot.bet:
#     databot.last_mes = bot.edit_message_text(chat_id = user.id, message_id = databot.mes_now.message_id, reply_markup=markup, 
#     text=f'–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ —Ä–∞–≤–Ω–∞ = {databot.bet}')
            

def randomid (message):
    global databot
    cdb.execute (f"SELECT cash from users WHERE login = '{user.lg}'")
    cash = cdb.fetchone()[0]
    # tprint (ud.ms, '\n–ï—Å–ª–∏ –Ω–∞–∏–≥—Ä–∞–ª–∏—Å—å –ø–∏—à–∏—Ç–µ "–≤—ã—Ö–æ–¥/quit" –¥–ª—è –≤—ã—Ö–æ–¥–∞')
    fortune = randint (-20, 20)
    bet_new = (fortune * int(databot.bet) / 10).real    # –ú–µ—Ç–æ–¥ .real —ç—Ç–æ –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–∑ —á–∏—Å–µ–ª. –ù–∞ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—É—á–∞–µ–º float
    cash += round (bet_new, 2)
    if databot.last_bet_mes is None:    
        databot.last_bet_mes = tprint (message, f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ\n–í—ã\n–¢–µ–ø–µ—Ä—å –≤–∞—à –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω: ') 
    # if databot.last_bet_mes is None:
        # if fortune >= 0: 
        #     databot.bet_mes = tprint (message, f"–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {fortune}\n–í—ã –≤—ã–π–≥—Ä–∞–ª–∏: {round(bet_new,2)} ‚úÖ\n–¢–µ–ø–µ—Ä—å –≤–∞—à –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω: {cash:.1f}")
        # elif fortune < 0:
        #     databot.bet_mes = tprint (message, f"–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {fortune}\n–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏: {round(bet_new,2)} ‚ùå\n–¢–µ–ø–µ—Ä—å –≤–∞—à –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω: {cash:.1f}")
    # else:
    if fortune >= 0: 
        databot.bet_mes = bot.edit_message_text(chat_id = user.id, message_id = databot.last_bet_mes.message_id, text=f"–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {fortune}\n‚úÖ–í—ã –≤—ã–π–≥—Ä–∞–ª–∏: {round(bet_new,2)}\n–¢–µ–ø–µ—Ä—å –≤–∞—à –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω: {cash:.1f}")
    elif fortune < 0:
        databot.bet_mes = bot.edit_message_text(chat_id = user.id, message_id = databot.last_bet_mes.message_id, text=f"–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {fortune}\n‚ùå–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏\n–¢–µ–ø–µ—Ä—å –≤–∞—à –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω: {cash:.1f}")
    databot.last_bet_mes = databot.bet_mes
    log.info(f'ID:{ud(message).id}, {ud(message).fn}({ud(message).lg}), {databot.last_bet_mes.text}')
    if cash <= 0: zeroing(user.lg)
    else:
        cdb.execute (f"UPDATE users SET cash = {cash:.1f} WHERE login = '{user.lg}'")
        db.commit()
    bet_check(message)


########################################################

def slot_machin (message):
    global databot
    cdb.execute (f"SELECT cash from users WHERE login = '{user.lg}'")
    cash = cdb.fetchone()[0]
    bet_new = databot.bet
    table = {'üíÄ':1, 'üåë':2.5, 'üåï':5, '‚≠êÔ∏è':10, 'üåà':25, 'üî•':50, 'üíØ':100, 'üí∞':250} 
    simbol = [i for i in table.keys ()]
    chance = []
    if databot.last_bet_mes is None:
        databot.last_bet_mes = tprint (message, f'\n\n\n–í–∞—à –±–∞–ª–∞–Ω—Å = ')
    chance.append (simbol[int (mt.log(random(), 0.5) % 8)])
    while len(chance)<3:
        if random () < databot.ch:  chance.append (chance[0])
        else: chance.append (simbol[int (mt.log(random(), 0.5) % 8)])
    if chance [0] == chance [1]: 
        if chance [1] == chance [2]: 
            bet_new *= table.get (chance [-1])
            cash += bet_new
            databot.bet_mes = bot.edit_message_text(chat_id = user.id, message_id = databot.last_bet_mes.message_id, text=f'{" ".join (chance)}\n‚úÖ–í—ã –≤—ã–π–≥—Ä–∞–ª–∏! = {bet_new}\n–í–∞—à –±–∞–ª–∞–Ω—Å = {cash:.1f}')
            databot.ch = 0.15
        else: 
            cash -= bet_new
            databot.bet_mes = bot.edit_message_text(chat_id = user.id, message_id = databot.last_bet_mes.message_id, text=f'{" ".join (chance)}\n‚ùå–ü–æ—á—Ç–∏! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏\n–í–∞—à –±–∞–ª–∞–Ω—Å = {cash:.1f}')
            databot.ch += 0.05
    else: 
        cash -= bet_new
        databot.bet_mes = bot.edit_message_text(chat_id = user.id, message_id = databot.last_bet_mes.message_id, text=f'{" ".join (chance)}\n‚ùå–ü—Ä–æ–π–≥—Ä—ã—à!\n–í–∞—à –±–∞–ª–∞–Ω—Å = {cash:.1f}')
        databot.ch += 0.05
    if cash <= 0: zeroing(user.lg)
    else:
        cdb.execute (f"UPDATE users SET cash = {cash:.1f} WHERE login = '{user.lg}'")
        db.commit()
    databot.last_bet_mes = databot.bet_mes
    log.info(f'ID:{ud(message).id}, {ud(message).fn}({ud(message).lg}), {databot.last_bet_mes.text}')
    bet_check(message)

########################################################

def ruletka(message):
    if databot.mes_value.find ('-') != -1:
        chance = [int (f) for f in databot.mes_value.split ('-')]
        chance = range (chance[0], chance[-1]+1)
    else: chance = int (databot.mes_value)
    bet = databot.bet
    cdb.execute (f"SELECT cash from users WHERE login = '{user.lg}'")
    cash = cdb.fetchone()[0]
    rulet = randint (1, 36) 
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–∞–≤—à–µ–µ —á–∏—Å–ª–æ —Å–æ —Å—Ç–∞–≤–∫–æ–π
    result = 0
    if databot.last_bet_mes is None: databot.last_bet_mes = tprint (message, '–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞')
    # elif databot.last_bet_mes.text == databot.bet_mes.text: return
    if isinstance (chance, int):    
        if rulet == chance:
            result = bet * 35
            cash += result
            databot.bet_mes = bot.edit_message_text(chat_id = user.id, message_id = databot.last_bet_mes.message_id, text=f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {rulet}\n‚úÖ–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–π–≥—Ä–∞–ª–∏: {result:.1f}\n–í–∞—à –±–∞–ª–∞–Ω—Å = {cash}')
        else:
            result -= bet
            cash += result
            databot.bet_mes = bot.edit_message_text(chat_id = user.id, message_id = databot.last_bet_mes.message_id, text=f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {rulet}\n‚ùå–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏\n–í–∞—à –±–∞–ª–∞–Ω—Å = {cash}')
    else:
        if rulet in chance:
            result = bet * 2.5
            cash += result
            databot.bet_mes = bot.edit_message_text(chat_id = user.id, message_id = databot.last_bet_mes.message_id, text=f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {rulet}\n‚úÖ–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–π–≥—Ä–∞–ª–∏: {result:.1f}\n–í–∞—à –±–∞–ª–∞–Ω—Å = {cash}')
        else:
            result -= bet
            cash += result
            databot.bet_mes = bot.edit_message_text(chat_id = user.id, message_id = databot.last_bet_mes.message_id, text=f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {rulet}\n‚ùå–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏\n–í–∞—à –±–∞–ª–∞–Ω—Å = {cash}')
    databot.last_bet_mes = databot.bet_mes
    cdb.execute (f"UPDATE users SET cash = {cash:.1f} WHERE login = '{user.lg}'")
    db.commit()
    log.info(f'ID:{ud(message).id}, {ud(message).fn}({ud(message).lg}), {databot.last_bet_mes.text}')
    bet_check (message)
    

# #########################################################

# def setings (): 
#     tprint (message, '''–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –≤ —Å–µ–±–µ —Å–ª–µ–¥—É—é—â–∏–µ –º–µ–Ω—é:
#     'regis' - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, 
#     'random' - –ò–≥—Ä–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ,
#     'table' - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é,
#     'plays' - –ù–∞—á–∞–ª–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã,
#     'zero' - –û–±–Ω—É–ª–µ–Ω–∏–µ,
#     'delet' - –£–¥–∞–ª–µ–Ω–∏–µ,
#     'allshow' - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤,
#     'quit' - –í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã,
#     'show' - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ,
#     'cashup' - –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —É –∏–≥—Ä–æ–∫–∞,
#     'probin' - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–Ω–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ,
#     'slotmach' - "–û–¥–Ω–æ—Ä—É–∫–∏–π –±–∞–Ω–¥–∏—Ç"
#     'betcheck' - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–≤–∫–∏ —É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
#     'rulet' - –†—É–ª–µ—Ç–∫–∞''')
#     word = input()

#     sets = {'regis': registrate ,
#             'random': randomid ,
#             'table': main_table,
#             'plays': play,
#             'zero': zeroing ,
#             'delet': delete,
#             'allshow': show_all_user,
#             'quit': quit,
#             'show': show_user,
#             'cashup': cash_up,
#             'probin': prob_init,
#             'betcheck': bet_check,
#             'slotmach': slot_machin,
#             'rulet': ruletka}.get (word, "–û—à–∏–±–∫–∞, –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è!")
#     if word in ['regis', 'plays', 'allshow', 'quit']:
#         if word == 'regis':    return sets(input ('Log in: '), input ('Password: '))
#         else:   return sets() 
#     elif word in ['rulet', 'slotmach', 'random', 'table', 'plays', 'zero', 'delet', 'show', 'cashup', 'probin', 'betcheck']: return sets(input ('Log in: '))
#     return setings()

# #########################################################

# def prob_init (message):
#     cdb.execute (f"SELECT * FROM users WHERE login = '{user.lg}'")
#     if cdb.fetchone () is None: return tprint (message, "–ù–µ –Ω–∞–π–¥–µ–Ω –¥–∞–Ω–Ω—ã–π –ª–æ–≥–∏–Ω!")
#     else: True
    
# #########################################################
    
# def show_user(user): 
#     for value in cdb.execute (f"SELECT * FROM users WHERE login = '{user}'"):
#         tprint (value)

# #########################################################
    
# def show_all_user(): 
#     for value in cdb.execute (f"SELECT * FROM users"):
#         tprint (value)


# #########################################################

# def delete (user_login):
#     prob_init (user_login)
#     cdb.execute (f"DELETE FROM users WHERE login = '{user_login}'")
#     db.commit()
#     tprint (message, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω!")
#     initialization()

#########################################################

def zeroing (user_login):
    cdb.execute (f"UPDATE users SET cash = 0 WHERE login = '{user_login}'")
    db.commit()
    tprint (user.ms, "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Å—Ä–µ–¥—Å—Ç–≤–∞! –û–±—Ä–∞–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @p_arti_a")
    welcome(user.ms)

#########################################################

# def main_table(user_login):
#     prob_init (user_login)
#     cdb.execute (f"SELECT * from users WHERE login = '{user_login}'")
#     cash = cdb.fetchone()[-1]
#     # print ('\n–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–ª–∏—Å—å!')
#     tprint (f'{user_login}, –í–∞—à –±–∞–ª–∞–Ω—Å: {cash}')

# #########################################################

# def cash_up(user_login):
#     prob_init (user_login)
#     new_cash = int(input_set('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: '))
#     cdb.execute (f"SELECT cash FROM users WHERE login = '{user_login}'")
#     cash = cdb.fetchone()[0]
#     cdb.execute (f"UPDATE users SET cash = {cash + new_cash} WHERE login = '{user_login}'")
#     db.commit()
#     tprint (f'{user_login}, –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –∏ —Ä–∞–≤–µ–Ω: {cash + new_cash}')
    
#########################################################

def cash_check (user_login):
    cdb.execute (f"SELECT  cash from users WHERE login = '{user_login}'")
    cash = cdb.fetchone()[0]
    if cash < databot.bet:
        tprint (user.ms, "–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –±–æ–ª—å—à–µ –≤–∞—à–µ–≥–æ —Å—á—ë—Ç–∞!")
        # welcome(user.ms)
        return True
    else: False

#########################################################
# def input_set(text):
#     if text in ['setings', 'seting', 'settings', 'setting']:
#         setings()
#         quit()
#     elif text == "": 
#         tprint (message, "–í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö!")
#         input_set ()
#     else: return text


#########################################################
# MAIN PROGRAM

# @bot.message_handler(content_types=['text'])
# def main():
    # user = ud(mes)
    # bot.register_next_step_handler(user.ms, initialization)

#     # try:
#     play(message)
#     # finally:
#     #     cdb.close()
#     #     db.close()


# if __name__ == '__main__':
bot.enable_save_next_step_handlers(delay=2)
bot.load_next_step_handlers()
bot.infinity_polling()
#########################################################