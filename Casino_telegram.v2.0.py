#########################################################
# INITIALIZATION VARIABLES

import logging as log
import telebot
from telebot import types
import sqlite3
from random import randint, random
from config import TOKEN, direct, directhandler
from Keyboard import keyboard
import math as mt

class ud:   #UserData Class
    def __init__(self, message):
        self.id = message.chat.id #User identifier
        self.fn = message.from_user.first_name #First username
        self.lg = message.from_user.username #User nickname
class wordbook:
    def __init__(self, tupledata) -> None:
        self.lg = tupledata[0] #User nickname 
        self.pw = tupledata[1] #User password
        self.st = tupledata[2] #State machin
        self.fn = tupledata[3] #First username
        self.id = tupledata[4] #User identifier
        self.ch = tupledata[5] #User cash
class wordbook_bot:
    def __init__(self, tupledata) -> None:
        self.lg = tupledata[0] #User nickname 
        self.mes_id = tupledata[1]
        self.last_mes_id = tupledata[2]
        self.bet = tupledata[3]
        self.last_bet = tupledata[4]
        self.bet_mes_id = tupledata[5]
        self.last_bet_mes_id = tupledata[6]
        self.ch = tupledata[7]
        self.pb = tupledata[8]
        self.mes_value = tupledata[9]
        self.last_mes_value = tupledata[10]
class bd:
    def __init__(self, mes = '') -> None:
        self.mes_id = mes.message_id
        self.mes_now = mes
        self.last_mes = None
        self.bet = 1
        self.last_bet = 1
        self.bet_mes = None
        self.last_bet_mes = None
        self.ch = 0.15
        self.pb = 0
        self.mes_value = None
        self.last_mes_value = None

bot = telebot.TeleBot(TOKEN)

db = sqlite3.connect ('CasinoDataTelegram.db', check_same_thread=False)  # DataBase
cdb = db.cursor()                       # Cursor of DB

                                        # Create table
cdb.execute ("""CREATE TABLE IF NOT EXISTS bot (
    user_chat_id BIGINT,
    message_id BIGINT,
    last_message_id BIGINT,
    bet BIGINT,
    last_bet BIGINT,
    bet_message_id BIGINT,
    last_bet_message_id BIGINT,
    chance REAL,
    prob BIGINT,
    message_value TEXT,
    last_message_value TEXT                          
)""")
db.commit()

cdb.execute ("""CREATE TABLE IF NOT EXISTS users (
    login TEXT,
    password TEXT, 
    password_state TEXT, 
    user_first_name TEXT, 
    user_chat_id BIGINT, 
    cash BIGINT
)""")
db.commit()

#########################################################
# BASIC PROGRAM

log.basicConfig(filename=direct, format='%(asctime)s - %(message)s', level=log.CRITICAL, encoding='utf-8', datefmt='%m/%d/%Y %H:%M:%S')

@bot.message_handler(commands=['start'])
def welcome (message):
    log.critical(f'ID:{ud(message).id}, {ud(message).fn}({ud(message).lg}), –∏—Å–ø. –∫–æ–º–∞–Ω–¥—É: {message.text}')
    markup = keyboard.mark(keyboard.button("–ö–∞–∑–∏–Ω–æ"), keyboard.button("–ö–æ—Å—Ç–∏"), keyboard.button("–ú–æ—ë –∫–∞–∑–∏–Ω–æ"))

    bot.send_message(ud(message).id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {ud(message).fn}!\n*{bot.get_me().first_name}* —ç—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –∑–∞–º–µ–Ω–∏—Ç—å –≤–∞–º —Ä–µ–∞–ª—å–Ω—ã–µ –∏–≥—Ä–æ–≤—ã–µ –∞–≤—Ç–æ–º–∞—Ç—ã, –∏ –≤–µ—Å–µ–ª–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è!",
    parse_mode='markdown', reply_markup = markup)

@bot.message_handler(commands=['notification'])
def notification(message):
    log.critical(f'ID:{ud(message).id}, {ud(message).fn}({ud(message).lg}), –∏—Å–ø. –∫–æ–º–∞–Ω–¥—É: {message.text}')
    markup = keyboard.mark(keyboard.button("–ù–∞–∑–∞–¥"))
    with open (direct, 'rt', encoding='utf-8') as f:
        text = f.readlines()
        table_t = []
        for t in text:
            t = t.split()
            if f'ID:{ud(message).id},' in t and "–í—ã–ø–∞–ª–æ" in t:
                t = t[1:3]+t[6:]
                table_t.append (' '.join(t))
        text = '\n'.join(table_t[-10:])
    
    bot.send_message(ud(message).id, f'{ud(message).fn}, –≤–æ—Ç —Ç–µ–∫—É—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—Ä—É—á–µ–Ω–∏—è –≤ –∫–∞–∑–∏–Ω–æ:\n{text}', reply_markup = markup)

@bot.callback_query_handler(func = lambda call: call.data in ['-10', '-', 'bet', '+', '+10'])
def callback_inline(call):
    userdata = wordbook(from_base(call.message, 'users'))
    botdata = wordbook_bot(from_base(call.message, 'bot'))
    if call.message:
        if call.data == '-10': 
            botdata.bet -= 10
            if botdata.bet < 1: botdata.bet = 1
        elif call.data == '-': 
            botdata.bet -= 1
            if botdata.bet < 1: botdata.bet = 1
        elif call.data == 'bet': 
            if userdata.ch < botdata.bet:
                bot.send_message (call.message.chat.id, "–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –±–æ–ª—å—à–µ –≤–∞—à–µ–≥–æ —Å—á—ë—Ç–∞!")
                return
            match userdata.st:
                case 'random':
                    base_save_bot (call.message, botdata)
                    randomid(call.message)
                    return
                case 'slot':
                    base_save_bot (call.message, botdata)
                    slot_machin(call.message)
                    return
                case 'rulet':
                    markup = keyboard.inlinekeyboard()
                    botdata.last_mes_id = bot.edit_message_text(chat_id = userdata.id, message_id = botdata.last_mes_id, reply_markup=markup, 
                    text=f'–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ!')
                case _:
                    base_save_bot (call.message, botdata)
                    tprint (call.message, '–ò–≥—Ä–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞!')
                    play (call.message)
                    quit()
        elif call.data == '+': 
            botdata.bet += 1
        elif call.data == '+10': 
            botdata.bet += 10
    
        if call.data != 'bet' and botdata.last_bet != botdata.bet:
            markup = keyboard.markinline(keyboard.inlinebut('-10'), 
                                    keyboard.inlinebut('-'), 
                                    types.InlineKeyboardButton(f'{botdata.bet}', callback_data='bet'),
                                    keyboard.inlinebut('+'), 
                                    keyboard.inlinebut('+10'), Row_width = 5)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text = f'–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ —Ä–∞–≤–Ω–∞ = {botdata.bet}', 
            reply_markup = markup) 
            botdata.last_bet = botdata.bet
            base_save_bot (call.message, botdata)

@bot.callback_query_handler(func = lambda call: call.data in str(range(1, 37)) or ['1-12', '13-24', '25-36', '–í—ã–±–æ—Ä'])
def callback_inline(call):
    userdata = wordbook(from_base(call.message, 'users'))
    botdata = wordbook_bot(from_base(call.message, 'bot'))
    if call.message:
        if call.data == ' ': pass 
        elif call.data == '–í—ã–±–æ—Ä': 
            try:
                if botdata.last_mes_id != False:
                    bot.delete_message(chat_id = userdata.id, message_id = botdata.last_bet_mes_id )
            except: pass
            finally:
                    botdata.pb = 0
                    botdata.last_bet_mes_id = 0
            base_save_bot (call.message, botdata)
            bet_check (call.message)
            return
        elif call.data in str(range(1, 37)) or ['1-12', '13-24', '25-36']:
            botdata.mes_value = call.data
            if botdata.mes_value != botdata.last_mes_value:
                markup = keyboard.inlinekeyboard()
                botdata.last_mes_id = bot.edit_message_text(chat_id = userdata.id, message_id = botdata.mes_id, text = f'–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ —Ä–∞–≤–Ω–∞ = {botdata.mes_value}\n–ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã,\n–Ω–∞–∂–º–∏—Ç–µ –µ—â—ë —Ä–∞–∑', 
                reply_markup = markup).id
                botdata.last_mes_value = botdata.mes_value
            else: 
                ruletka(call.message)
                return
    base_save_bot (call.message, botdata)
    base_save_user (call.message, userdata)


@bot.message_handler(content_types=['text'])
def messaged (message):
    try:
        userdata = wordbook(from_base(message, 'users'))
        botdata = wordbook_bot(from_base(message, 'bot'))
    except NameError: 
        cdb.execute (f'INSERT INTO users VALUES (?, ?, ?, ?, ?, ?)', (message.from_user.username, None, True, message.from_user.first_name, message.chat.id, 0))
        cdb.execute (f'INSERT INTO bot VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', (message.from_user.id, 0, 0, 1, 1, 0, 0, 0.15, 0, 0, 0))
        db.commit()
        userdata = wordbook(from_base(message, 'users'))
        botdata = wordbook_bot(from_base(message, 'bot'))
    try:
        if message.text not in ["üé∞ –ö–∞–∑–∏–Ω–æ!","üé≤ –ö–æ—Å—Ç–∏!"]:
            log.critical(f'ID:{userdata.id}, {userdata.fn}({userdata.lg}), –Ω–∞–ø–∏—Å–∞–ª: {message.text}')
        if message.text == "üé∞ –ö–∞–∑–∏–Ω–æ!":
            valuedice = bot.send_dice(message.chat.id, emoji='üé∞')
            log.critical(f'ID:{userdata.id}, {userdata.fn}({userdata.lg}), –≤ –ö–∞–∑–∏–Ω–æ = {valuedice.dice.value}')
        elif message.text == "üé≤ –ö–æ—Å—Ç–∏!":
            valuedice = bot.send_dice(message.chat.id)
            log.critical(f'ID:{userdata.id}, {userdata.fn}({userdata.lg}), –≤ –ö–æ—Å—Ç–∏ = {valuedice.dice.value}')
        elif message.text == "–°–∞–º–æ–¥–µ–ª—å–Ω–æ–µ –∫–∞–∑–∏–Ω–æ!":
            if userdata.pw is not None: 
                play (message)
            else:
                markup = keyboard.mark(keyboard.button("–í—Ö–æ–¥"), keyboard.button("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"), keyboard.button("–ù–∞–∑–∞–¥"), Row_width = 2)
                bot.send_message (userdata.id, '–ó–∞–ø—É—Å–∫ —Å–∞–º–æ–¥–µ–ª—å–Ω–æ–≥–æ –ö–∞–∑–∏–Ω–æ!', reply_markup=markup)
        elif message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
            welcome(message)
        elif message.text == "–í—Ö–æ–¥":   
            cdb.execute (f"SELECT password FROM users WHERE user_chat_id = '{userdata.id}'")
            if cdb.fetchone()[0] is None:
                tprint (message, '–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —É –Ω–∞—Å!\n\n–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!\n–í–≤–µ–¥–∏—Ç–µ –ü–∞—Ä–æ–ª—å')
                bot.register_next_step_handler(message, registrate)
            else:    
                tprint (message, '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å')
                bot.register_next_step_handler(message, initialization)
        elif message.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
            cdb.execute (f"SELECT password FROM users WHERE user_chat_id = '{userdata.id}'")
            if cdb.fetchone()[0] is not None:  
                tprint (message, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã\n–ï—Å–ª–∏ –≤—ã –∑–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @p_arti_a')
                return
            tprint (message, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!\n–í–≤–µ–¥–∏—Ç–µ –ü–∞—Ä–æ–ª—å')
            bot.register_next_step_handler(message, registrate)
        elif userdata.pw is not None and message.text in ["üé± –†–∞–Ω–¥–æ–ú–∏—Ç", "üé∞ –û–¥–Ω–æ—Ä—É–∫–∏–π –ë–∞–Ω–¥–∏—Ç", "üé≤ –†—É–ª–µ—Ç–∫–∞"]:
            botdata = wordbook_bot(from_base(message, 'bot'))
            try:
                if botdata.last_mes_id != False:
                    bot.delete_message(chat_id = userdata.id, message_id = botdata.last_mes_id)
                    bot.delete_message(chat_id = userdata.id, message_id = botdata.last_mes_id - 1)
                    bot.delete_message(chat_id = userdata.id, message_id = botdata.last_bet_mes_id)
            except: pass
            finally: 
                    botdata.last_mes_id = 0
                    botdata.last_bet_mes_id = 0
                    botdata.last_mes_value = 0
                    base_save_bot (message, botdata)
            match message.text:
                case "üé± –†–∞–Ω–¥–æ–ú–∏—Ç":
                    userdata.st, botdata.pb = 'random', 0
                    tprint (message, '–í –¥–∞–Ω–Ω–æ–π –∏–≥—Ä–µ –º–æ–∂–µ—Ç –≤—ã–ø–∞—Å—Ç—å —á–∏—Å–ª–æ –æ—Ç -20 –¥–æ 20. –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–ø–∞–≤—à–µ–≥–æ —á–∏—Å–ª–∞, –≤–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –±—É–¥–µ—Ç —É–º–Ω–æ–∂–µ–Ω–∞ –Ω–∞ —ç—Ç–æ —á–∏—Å–ª–æ –¥–µ–ª—ë–Ω–æ–µ –Ω–∞ 10.\n–í—ã–π–≥—Ä—ã—à = –°—Ç–∞–≤–∫–∞ * –ß–∏—Å–ª–æ / 10')
                    botdata.mes_id = tprint (message, "–ó–∞–ø—É—Å–∫–∞–µ–º –†–∞–Ω–¥–æ–ú–∏—Ç").id
                    base_save_bot (message, botdata)
                    base_save_user (message, userdata)
                case "üé∞ –û–¥–Ω–æ—Ä—É–∫–∏–π –ë–∞–Ω–¥–∏—Ç":
                    userdata.st, botdata.pb = 'slot', 0
                    table = {'üíÄ':1, 'üåë':2.5, 'üåï':5, '‚≠êÔ∏è':10, 'üåà':25, 'üî•':50, 'üíØ':100, 'üí∞':250} 
                    tprint (message, ''.join([f'{i}: {table[i]}X\n' for i in table]))
                    botdata.mes_id = tprint (message, "–ó–∞–ø—É—Å–∫–∞–µ–º –û–¥–Ω–æ—Ä—É–∫–æ–≥–æ –ë–∞–Ω–¥–∏—Ç–∞").id
                    base_save_bot (message, botdata)
                    base_save_user (message, userdata)
                case "üé≤ –†—É–ª–µ—Ç–∫–∞":
                    userdata.st, botdata.pb = 'rulet', 0
                    tprint (message, '–í –Ω–∞—á–∞–ª–µ, –≤—ã–±—Ä–µ—Ç–∏ —Å—Ç–∞–≤–∫—É, –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ –≤–∞—à–µ–º—É –º–Ω–µ–Ω–∏—é –º–æ–∂–µ—Ç –≤—ã–ø–∞—Å—Ç—å –≤ —Ä—É–ª–µ—Ç–∫–µ.\n–ï—Å–ª–∏ –≤—ã —É–≥–∞–¥–∞–µ—Ç–µ, –º–Ω–æ–∂–∏—Ç–µ–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ:\n–ó–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ: 35–•\n–ó–∞ –¥–∏–∞–ø–æ–∑–æ–Ω: 2,5–•')
                    botdata.mes_id = tprint (message, "–ó–∞–ø—É—Å–∫–∞–µ–º –†—É–ª–µ—Ç–∫—É").id
                    base_save_bot (message, botdata)
                    base_save_user (message, userdata)
            bet_check(message)
            return
        else: tprint (message, "–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã")
    except NameError as e:
        tprint (message, "–í—ã –µ—â—ë –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–ª–∏—Å—å!")
        log.error (e)


#########################################################
# FUNCSION

def from_base (message, table):
    cdb.execute (f"SELECT * FROM {table} WHERE user_chat_id = '{message.chat.id}'")
    data = cdb.fetchone ()
    if data is None: raise (NameError)
    else:   return data

def base_save_user (message, userdata_save):
    tuple_ = (userdata_save.pw, 
            userdata_save.st, 
            userdata_save.fn, 
            userdata_save.lg, 
            userdata_save.ch)
    cdb.execute (f"""UPDATE users SET password = ?, 
                                    password_state = ?, 
                                    user_first_name = ?, 
                                    login = ?, 
                                    cash = ?  
                                    WHERE user_chat_id = '{message.chat.id}'""", tuple_)
    db.commit()

def base_save_bot (message, botdata_save):
    tuple_ = (botdata_save.mes_id, 
            botdata_save.last_mes_id, 
            botdata_save.bet, 
            botdata_save.last_bet, 
            botdata_save.bet_mes_id,
            botdata_save.last_bet_mes_id,
            botdata_save.ch,
            botdata_save.pb,
            botdata_save.mes_value,
            botdata_save.last_mes_value)
    cdb.execute (f"""UPDATE bot SET message_id = ?,
                                    last_message_id = ?,
                                    bet = ?,
                                    last_bet = ?,
                                    bet_message_id = ?,
                                    last_bet_message_id = ?,
                                    chance = ?,
                                    prob = ?,
                                    message_value = ?,
                                    last_message_value = ?
                                    WHERE user_chat_id = '{message.chat.id}'""", tuple_) 
    db.commit()

#########################################################

def comeback (message):
    userdata = wordbook(from_base(message, 'users'))
    log.critical(f'ID:{ud(message).id}, {ud(message).fn}({ud(message).lg}), –Ω–∞–ø–∏—Å–∞–ª: {message.text}')
    if message.text in ['/start', '/notification', '‚óÄÔ∏è –ù–∞–∑–∞–¥']:
        welcome(message)
        return True
    elif message.text == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è':
        tprint (message, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!\n–í–≤–µ–¥–∏—Ç–µ –ü–∞—Ä–æ–ª—å')
        bot.register_next_step_handler(message, registrate)
        return True
    elif message.text == '–í—Ö–æ–¥':  
        cdb.execute (f"SELECT password FROM users WHERE user_chat_id = '{userdata.id}'")
        if cdb.fetchone()[0] is None:
            tprint (message, '–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —É –Ω–∞—Å!\n\n–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!\n–í–≤–µ–¥–∏—Ç–µ –ü–∞—Ä–æ–ª—å')
            bot.register_next_step_handler(message, registrate)
        else:    
            tprint (message, '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å')
            bot.register_next_step_handler(message, initialization)
        return True


#########################################################

def tprint (message, text, Reply_markup: str = None):
    userdata = wordbook(from_base(message, 'users'))
    log.critical(f'ID:{userdata.id}, {userdata.fn}({userdata.lg}), –≤—ã–≤–µ–ª –Ω–∞ —ç–∫—Ä–∞–Ω: {text}')
    return bot.send_message(message.chat.id , text, reply_markup=Reply_markup)

#########################################################

def registrate (message):
    if comeback(message):  return
    userdata = wordbook(from_base(message, 'users'))
    try:
        userdata.pw = message.text
    except ValueError:
        tprint (message, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã!\n –í–æ–∑–≤—Ä–∞—â–∞—é –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.')
        welcome(message)
    match userdata.pw:
        case '':
            tprint (message, '–í—ã –Ω–µ –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ!')
            bot.register_next_step_handler(message, registrate)
            return
        case userdata.pw if len(userdata.pw) < 4:
            tprint (message, "–í—ã –≤–≤–µ–ª–∏ –º–µ–Ω—å—à–µ 4 —Å–∏–º–≤–æ–ª–æ–≤!")
            bot.register_next_step_handler(message, registrate)
            return
    userdata.ch = 100
    base_save_user (message, userdata)
    tprint (message, f'–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å, {userdata.fn}\n–í–∞—à –±–∞–ª–∞–Ω—Å: 100')
    play(message)

#########################################################

def initialization(message):
    if comeback(message):  return
    userdata = wordbook(from_base(message, 'users'))
    try:
        userdata.pw = message.text
    except ValueError:
        tprint (message, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã!\n –í–æ–∑–≤—Ä–∞—â–∞—é –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.')
        welcome(message)
    match userdata.pw:
        case '':
            tprint (message, '–í—ã –Ω–µ –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ!')
            bot.register_next_step_handler(message, initialization)
            return
        case userdata.pw if len(userdata.pw) < 4:
            tprint (message, "–í—ã –≤–≤–µ–ª–∏ –º–µ–Ω—å—à–µ 4 —Å–∏–º–≤–æ–ª–æ–≤!")
            bot.register_next_step_handler(message, initialization)
            return
    cdb.execute (f"SELECT user_chat_id FROM users WHERE user_chat_id = '{userdata.id}' AND password = '{userdata.pw}'")
    if cdb.fetchone() is None:
        tprint (message, f'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å')
        bot.register_next_step_handler(message, initialization)
        return
    else:
        base_save_user(message, userdata)
        tprint (message, f'–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–ª–∏—Å—å {userdata.fn}')
        play(message)

#########################################################

def play(message):
    userdata = wordbook(from_base(message, 'users'))
    markup = keyboard.mark(keyboard.button('–†–∞–Ω–¥–æ–ú–∏—Ç'), keyboard.button('–ë–∞–Ω–¥–∏—Ç'), keyboard.button('–†—É–ª–µ—Ç–∫–∞'), keyboard.button('–ù–∞–∑–∞–¥'), Row_width = 2)
    tprint (message, f'\n–í –∫–∞–∫—É—é –∏–≥—Ä—É —Å—ã–≥—Ä–∞–µ–º?\n1. –†–∞–Ω–¥–æ–ú–∏—Ç\n2. –û–¥–Ω–æ—Ä—É–∫–∏–π –ë–∞–Ω–¥–∏—Ç\n3. –†—É–ª–µ—Ç–∫–∞\n–í–∞—à –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω: {userdata.ch}', Reply_markup = markup)
    bot.register_next_step_handler(message, messaged)
    return

#########################################################

def bet_check(message):
    botdata = wordbook_bot(from_base(message, 'bot'))
    userdata = wordbook(from_base(message, 'users'))
    markup = keyboard.markinline(keyboard.inlinebut('-10'), 
                                keyboard.inlinebut('-'), 
                                types.InlineKeyboardButton(f'{botdata.bet}', callback_data='bet'),
                                keyboard.inlinebut('+'), 
                                keyboard.inlinebut('+10'), Row_width = 5)
    if botdata.pb == 0:
        botdata.pb += 1
        botdata.last_mes_id = bot.edit_message_text(chat_id = userdata.id, message_id = botdata.mes_id, reply_markup=markup, 
        text=f'–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ —Ä–∞–≤–Ω–∞ = {botdata.bet}').id
    else: pass
    base_save_bot (message, botdata)           

def randomid (message):
    botdata = wordbook_bot(from_base(message, 'bot'))
    userdata = wordbook(from_base(message, 'users'))
    fortune = randint (-20, 20)
    bet_new = (fortune * int(botdata.bet) / 10).real    # –ú–µ—Ç–æ–¥ .real —ç—Ç–æ –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–∑ —á–∏—Å–µ–ª. –ù–∞ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—É—á–∞–µ–º float
    userdata.ch += round (bet_new, 2)
    if botdata.last_bet_mes_id == False:    
        botdata.last_bet_mes_id = tprint (message, f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ\n–í—ã\n–¢–µ–ø–µ—Ä—å –≤–∞—à –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω: ').id 
    if fortune >= 0: 
        botdata.bet_mes_id = bot.edit_message_text(chat_id = userdata.id, message_id = botdata.last_bet_mes_id, text=f"–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {fortune}\n‚úÖ–í—ã –≤—ã–π–≥—Ä–∞–ª–∏: {round(bet_new,2)}\n–¢–µ–ø–µ—Ä—å –≤–∞—à –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω: {userdata.ch:.1f}").id
    elif fortune < 0:
        botdata.bet_mes_id = bot.edit_message_text(chat_id = userdata.id, message_id = botdata.last_bet_mes_id, text=f"–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {fortune}\n‚ùå–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏\n–¢–µ–ø–µ—Ä—å –≤–∞—à –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω: {userdata.ch:.1f}").id
    botdata.last_bet_mes_id = botdata.bet_mes_id
    log.critical(f'ID:{userdata.id}, {userdata.fn} ({userdata.lg}), –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {fortune}, –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω: {userdata.ch:.1f}')
    if userdata.ch <= 0: zeroing(message)
    else:
        cdb.execute (f"UPDATE users SET cash = {userdata.ch:.1f} WHERE user_chat_id = '{userdata.id}'")
        db.commit()
    base_save_bot (message, botdata)
    base_save_user (message, userdata)
    bet_check(message)


########################################################

def slot_machin (message):
    botdata = wordbook_bot(from_base(message, 'bot'))
    userdata = wordbook(from_base(message, 'users'))
    bet_new = botdata.bet
    table = {'üíÄ':1, 'üåë':2.5, 'üåï':5, '‚≠êÔ∏è':10, 'üåà':25, 'üî•':50, 'üíØ':100, 'üí∞':250} 
    simbol = [i for i in table.keys ()]
    chance = []
    if botdata.last_bet_mes_id == False:
        botdata.last_bet_mes_id = tprint (message, f'\n\n\n–í–∞—à –±–∞–ª–∞–Ω—Å = ').id
    chance.append (simbol[int (mt.log(random(), 0.5) % 8)])
    while len(chance)<3:
        if random () < botdata.ch:  chance.append (chance[0])
        else: chance.append (simbol[int (mt.log(random(), 0.5) % 8)])
    if chance [0] == chance [1]: 
        if chance [1] == chance [2]: 
            bet_new *= table.get (chance [-1])
            userdata.ch += bet_new
            botdata.bet_mes_id = bot.edit_message_text(chat_id = userdata.id, message_id = botdata.last_bet_mes_id, text=f'–í—ã–ø–∞–ª–æ {" ".join (chance)}\n‚úÖ–í—ã –≤—ã–π–≥—Ä–∞–ª–∏! = {bet_new}\n–í–∞—à –±–∞–ª–∞–Ω—Å = {userdata.ch:.1f}').id
            botdata.ch = 0.15
        else: 
            userdata.ch -= bet_new
            botdata.bet_mes_id = bot.edit_message_text(chat_id = userdata.id, message_id = botdata.last_bet_mes_id, text=f'–í—ã–ø–∞–ª–æ {" ".join (chance)}\n‚ùå–ü–æ—á—Ç–∏! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏\n–í–∞—à –±–∞–ª–∞–Ω—Å = {userdata.ch:.1f}').id
            botdata.ch += 0.05
    else: 
        userdata.ch -= bet_new
        botdata.bet_mes_id = bot.edit_message_text(chat_id = userdata.id, message_id = botdata.last_bet_mes_id, text=f'–í—ã–ø–∞–ª–æ {" ".join (chance)}\n‚ùå–ü—Ä–æ–π–≥—Ä—ã—à!\n–í–∞—à –±–∞–ª–∞–Ω—Å = {userdata.ch:.1f}').id
        botdata.ch += 0.05
    if userdata.ch <= 0: zeroing(message)
    else:
        botdata.last_bet_mes_id = botdata.bet_mes_id
        base_save_user (message, userdata)
    log.critical(f'ID:{userdata.id}, {userdata.fn}({userdata.lg}), –í—ã–ø–∞–ª–æ {" ".join (chance)}, —Å—Ç–∞–≤–∫–∞ {bet_new}, –±–∞–ª–∞–Ω—Å = {userdata.ch:.1f}')
    base_save_bot (message, botdata)
    bet_check(message)

########################################################

def ruletka(message):
    botdata = wordbook_bot(from_base(message, 'bot'))
    userdata = wordbook(from_base(message, 'users'))
    if botdata.mes_value.find ('-') != -1:
        chance = [int (f) for f in botdata.mes_value.split ('-')]
        chance = range (chance[0], chance[-1]+1)
    else: chance = int (botdata.mes_value)
    bet = botdata.bet
    rulet = randint (1, 36) 
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–∞–≤—à–µ–µ —á–∏—Å–ª–æ —Å–æ —Å—Ç–∞–≤–∫–æ–π
    result = 0
    if botdata.last_bet_mes_id == False: botdata.last_bet_mes_id = tprint (message, '–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞').id
    if isinstance (chance, int):    
        if rulet == chance:
            result = bet * 35
            userdata.ch += result
            botdata.bet_mes_id = bot.edit_message_text(chat_id = userdata.id, message_id = botdata.last_bet_mes_id, text=f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {rulet}\n‚úÖ–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–π–≥—Ä–∞–ª–∏: {result:.1f}\n–í–∞—à –±–∞–ª–∞–Ω—Å = {userdata.ch:.1f}').id
        else:
            result -= bet
            userdata.ch += result
            botdata.bet_mes_id = bot.edit_message_text(chat_id = userdata.id, message_id = botdata.last_bet_mes_id, text=f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {rulet}\n‚ùå–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏\n–í–∞—à –±–∞–ª–∞–Ω—Å = {userdata.ch:.1f}').id
    else:
        if rulet in chance:
            result = bet * 2.5
            userdata.ch += result
            botdata.bet_mes_id = bot.edit_message_text(chat_id = userdata.id, message_id = botdata.last_bet_mes_id, text=f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {rulet}\n‚úÖ–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–π–≥—Ä–∞–ª–∏: {result:.1f}\n–í–∞—à –±–∞–ª–∞–Ω—Å = {userdata.ch:.1f}').id
        else:
            result -= bet
            userdata.ch += result
            botdata.bet_mes_id = bot.edit_message_text(chat_id = userdata.id, message_id = botdata.last_bet_mes_id, text=f'–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {rulet}\n‚ùå–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏\n–í–∞—à –±–∞–ª–∞–Ω—Å = {userdata.ch:.1f}').id
    botdata.last_bet_mes_id = botdata.bet_mes_id
    if userdata.ch <= 0: zeroing(message)
    else:
        base_save_user (message, userdata)
    log.critical(f'ID:{userdata.id}, {userdata.fn}({userdata.lg}), –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {rulet}, —Å—Ç–∞–≤–∏–ª–∏ –Ω–∞ {botdata.mes_value}, –±–∞–ª–∞–Ω—Å = {userdata.ch:.1f}')
    base_save_bot (message, botdata)
    bet_check (message)
    
#########################################################

def zeroing (message):
    userdata = wordbook(from_base(message, 'users'))
    cdb.execute (f"UPDATE users SET cash = 0 WHERE user_chat_id = '{userdata.id}'")
    db.commit()
    tprint (message, "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Å—Ä–µ–¥—Å—Ç–≤–∞! –û–±—Ä–∞–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @p_arti_a")
    base_save_user(message, userdata)
    welcome(message)

#########################################################
# MAIN PROGRAM

bot.enable_save_next_step_handlers(delay=2)
bot.load_next_step_handlers()
try:
    bot.infinity_polling()
except:
    pass

#########################################################